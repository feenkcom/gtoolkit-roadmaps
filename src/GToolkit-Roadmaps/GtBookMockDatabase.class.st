Class {
	#name : #GtBookMockDatabase,
	#superclass : #Object,
	#traits : 'TDatabaseHolder',
	#classTraits : 'TDatabaseHolder classTrait',
	#category : #'GToolkit-Roadmaps-PageClassifier'
}

{ #category : #page }
GtBookMockDatabase >> aGentleIntroductionToPharoSmalltalk [
	<lePage>
	<gtExample>
	^ ((LePage named: 'A gentle introduction to Pharo Smalltalk')addSnippet: (LeTextSnippet new string: '##TL;DR'; addSnippet: (LeTextSnippet new string: 'In this tutorial we learn the basics of Pharo Smalltalk using a running example of code to unscramble an English-language word.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Introduction'; addSnippet: (LeTextSnippet new string: 'Pharo is a modern dialect of the classic Smalltalk-80 language and environment.'; yourself); addSnippet: (LeTextSnippet new string: 'The key thing that distinguishes Smalltalk from other  OO languages is that it is a *live environment* in which you interact with live objects inside a running image, and you incrementally add and modify classes and methods within a running system.'; yourself); addSnippet: (LeTextSnippet new string: 'For a high-level overview of the run-time architecture of Smalltalk and Pharo, see: [[Pharo architecture]].'; yourself); addSnippet: (LeTextSnippet new string: 'In this tutorial we will directly run code snippets, without creating any new classes or methods.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#The Jumble puzzle'; addSnippet: (LeTextSnippet new string: 'The [Jumble puzzle](https://fun.chicagotribune.com/game/uc-jumble-daily-in-color) is a classic syndicated newspaper game in which four scrambled words have to be unscrambled to form ordinary English. Selected letters from the four answers form the scrambled answer to a punny (but not very funny) cartoon puzzle. We will solve the first part, which is to unscramble the words.'; yourself); addSnippet: (LeTextSnippet new string: '*Unscrambling strategy:* The idea is to look up the scrambled word in a dictionary whose keys consist of a canonical representation of each word as a bag of letters. The easiest such representation is the sorted list of letters in the word. '; yourself); addSnippet: (LeTextSnippet new string: 'For example, to unscramble the letters `''gameses''`, we would sort the letters of the string to produce the key `''aeegmss''` , and look up that key in our dictionary to find all the real words with the same key.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#A pure Smalltalk solution'; addSnippet: (LeTextSnippet new string: 'The following snippet solves the puzzle without defining any new classes or methods. Later we could implement a `Jumble` class that unscrambles words for us, but for now let''s just work with a live snippet.'; yourself); addSnippet: (LeTextSnippet new string: 'Have a quick look at the code, and run it by clicking on the Inspect icon:'; yourself); addSnippet: (LeElementSnippet new code: 'BrGlamorousVectorIcons playinspect'; codeVisible: false; elementHeight: 30; codeHeight: 50; yourself); addSnippet: (LeTextSnippet new string: 'You should be able to make sense of the code as a kind of pidgin English, even if the details will need some explanation.'; yourself); addSnippet: (LePharoSnippet new code: 'wordlistUrl := ''https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt''.
words := (ZnUrl fromString: wordlistUrl) retrieveContents.
wordList := (Character cr asString , Character lf asString) split: words.
wordDict := Dictionary new.
wordList do: [:word |
	key := word sorted.
	wordDict
		at: key
		ifPresent: [:v | v addLast: word ]
		ifAbsentPut: [ { word } asOrderedCollection]
	].
wordDict at: ''gameses'' sorted'; yourself); addSnippet: (LeTextSnippet new string: 'After clicking on the Inspect button, you should see in the adjacent pane the two possible answers, namely "megasse" and "message".'; yourself); addSnippet: (LeTextSnippet new string: 'Now let''s look into the details of how it works.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Two rules about understanding Smalltalk'; addSnippet: (LeTextSnippet new string: 'There are two basic rules to understanding Smalltalk code:'; yourself); addSnippet: (LeTextSnippet new string: '1. *Everything is an object*'; yourself); addSnippet: (LeTextSnippet new string: 'and'; yourself); addSnippet: (LeTextSnippet new string: '2. *Everything happens by sending messages*'; yourself); addSnippet: (LeTextSnippet new string: 'As in most languages, the code snippet above consists of a block of *statements*, each of which contains one or more nested *expressions*.  Unlike other languages, the statements are separated by periods (`.`) For more details, see: [[Understanding Smalltalk method syntax]]. The expressions, by and large, consist of *message sends*. For the details, please see: [[Understanding Smalltalk message syntax]]. '; yourself); addSnippet: (LeTextSnippet new string: 'For a compact overview, see: [[Smalltalk method syntax on a postcard]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Grabbing a list of words from the web'; addSnippet: (LeTextSnippet new string: 'Before we start coding our solution, we search for an online list of English words, and find a pretty extensive one on [github](https://github.com/dwyl/english-words).'; yourself); addSnippet: (LeTextSnippet new string: 'We first save the URL as a Smalltalk string.'; yourself); addSnippet: (LePharoSnippet new code: 'wordlistUrl := ''https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt''.'; yourself); addSnippet: (LeTextSnippet new string: 'Assignment to a variable uses the `:=` operator, as opposed to `=` and `==`, which are comparison messages.'; yourself); addSnippet: (LeTextSnippet new string: 'Also note that a string in Smalltalk is delimited by single quotes `''`, not double quotes `"` (which delimit comments).'; yourself); addSnippet: (LeTextSnippet new string: 'We did not end the snippet with a period because `.` is a statement *separator* in Smalltalk, not a terminator. We only need periods to separate two or more statements.'; yourself); addSnippet: (LeTextSnippet new string: 'Next we retrieve the contents of the web page as a String:'; yourself); addSnippet: (LePharoSnippet new code: 'words := (ZnUrl fromString: wordlistUrl) retrieveContents'; yourself); addSnippet: (LeTextSnippet new string: 'Here we see two kinds of message sends. First we send the `fromString:` keyword message with the argument `wordlistUrl`  to the {{gtClass:name=ZnUrl}} class to create an instance. Since everything is an object in Smalltalk, also classes are objects. Classes are globally accessible names and always start with an uppercase letter.'; yourself); addSnippet: (LeTextSnippet new string: 'We then send the `retrieveContents` unary message to the resulting instance of ZnUrl. If you Inspect the above snippet, you will see that the result is an instance of {{gtClass:name=ByteString}}. '; yourself); addSnippet: (LeTextSnippet new string: 'In addition to strings, Smalltalk provides built-in syntax for characters, literals, arrays, various kinds of numbers, and blocks (lambdas). For the details, see: [[Understanding Pharo built-in data types]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Splitting the result into a list of words'; addSnippet: (LeTextSnippet new string: 'At this point we have a retrieved the word list as a giant string.'; yourself); addSnippet: (LePharoSnippet new code: 'words'; yourself); addSnippet: (LeTextSnippet new string: 'If you look at the `Items` tab you will also see that the words are all separated by a carriage return and a linefeed character (`Character cr` followed by `Character lf`).'; yourself); addSnippet: (LeTextSnippet new string: 'We would like to split this huge string into a list of individual words that we can then use to build up a dictionary. To do this, we first build up a string from the carriage return and line feed characters. Since we can''t type them directly, we send the instance creation unary methods `cr` and `lf` to the {{gtClass:name=Character}} class (i.e., object), we convert each of these to a string by sending them the `asString` message, and then we concatenate them with the binary `,` message:'; yourself); addSnippet: (LePharoSnippet new code: 'Character cr asString , Character lf asString'; yourself); addSnippet: (LeTextSnippet new string: 'You can inspect the resulting string, but as it consists purely of whitespace, it is more informative to inspect the `Items`, `Tree` or `Raw` views.'; yourself); addSnippet: (LeTextSnippet new string: 'Finally we ask this whitespace string to split the words string into a collection by sending it the `split:` keyword message.'; yourself); addSnippet: (LePharoSnippet new code: 'wordList := (Character cr asString , Character lf asString) split: words.'; yourself); addSnippet: (LeTextSnippet new string: 'The result is an instance of the {{gtClass:name=OrderedCollection}} class.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Building the dictionary'; addSnippet: (LeTextSnippet new string: 'Our next step is to build up a dictionary from the list of words. We first create a new Dictionary by sending the unary `new` message to the {{gtClass:name=Dictionary}} class. '; yourself); addSnippet: (LePharoSnippet new code: 'wordDict := Dictionary new'; yourself); addSnippet: (LeTextSnippet new string: 'We then iterate over all the words in the `wordList` collection, adding each word to a list of words with the same key:'; yourself); addSnippet: (LePharoSnippet new code: 'wordList do: [:word |
	key := word sorted.
	wordDict
		at: key
		ifPresent: [:v | v addLast: word ]
		ifAbsentPut: [ { word } asOrderedCollection]
	].
wordDict'; yourself); addSnippet: (LeTextSnippet new string: 'This code requires some explanation.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Everything happens by sending messages'; addSnippet: (LeTextSnippet new string: 'Here we see the power of the Smalltalk object model. Instead of the language providing built-in iterators, *everything happens by sending messages*. We send the keyword message `do:` to the `wordList` collection, with a block (lambda) as its argument.'; yourself); addSnippet: (LeTextSnippet new string: 'A block has the general form:'; addSnippet: (LeTextSnippet new string: '`[ :` *argument* ... `|` *statements* `]`'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'There may be any number of arguments (including none), and any number of statements. The value of a block, when evaluated is that produced by the last statement.'; yourself); addSnippet: (LeTextSnippet new string: 'In this case the `do:` method will simply apply the block to each word in the list. For each word we sort the letters of the word to produce a `key`. '; yourself); addSnippet: (LeTextSnippet new string: 'For example, `''gameses'' sorted` yields `''aeegmss''`:'; yourself); addSnippet: (LePharoSnippet new code: '''gameses'' sorted'; yourself); addSnippet: (LeTextSnippet new string: 'Then we send the `wordDict` dictionary the keyword message `at:ifPresent:ifAbsentPut:`, which takes three arguments, a key and two blocks. If the key is already present in the dictionary, we simply add the word to the collection stored at that key. If the key is new, we add a new collection containing just that word.'; yourself); addSnippet: (LeTextSnippet new string: 'To learn more about different kinds of control structures provided by Smalltalk environment (as opposed to the language itself), see: [[Understanding Smalltalk control structures]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Different kinds of collections'; addSnippet: (LeTextSnippet new string: 'Here we see the built-in Pharo syntax for an array:'; yourself); addSnippet: (LePharoSnippet new code: '{ ''howdy'' }'; yourself); addSnippet: (LeTextSnippet new string: 'Since we don''t want an {{gtClass:name=Array}} but an {{gtClass:name=OrderedCollection}}, we send the message `asOrderedCollection` to the array.'; yourself); addSnippet: (LeTextSnippet new string: 'There are many different kinds of collections in Pharo. To learn more about them, see: [[Working with collections in Pharo]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Working with the dictionary'; addSnippet: (LeTextSnippet new string: 'If we inspect the resulting dictionary, we see that each key is a string of sorted characters, associated with a collection of English words containing the same characters.'; yourself); addSnippet: (LePharoSnippet new code: 'wordDict'; yourself); addSnippet: (LeTextSnippet new string: 'Now we can easily unscramble a word by sorting its characters to produce its key, and then looking the key up in the dictionary:'; yourself); addSnippet: (LePharoSnippet new code: 'wordDict at: ''gameses'' sorted'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#An exercise'; addSnippet: (LeTextSnippet new string: 'How would you find the largest set of words all with the same letters?'; yourself); addSnippet: (LeTextSnippet new string: '*Hint.* To find the longest word in the dictionary, you can evaluate the following:'; yourself); addSnippet: (LePharoSnippet new code: 'wordDict at: (wordDict keys sort: [:a :b | a size > b size ] ) first'; yourself); yourself); addSnippet: (LeTextSnippet new string: '##Next: working with classes and methods'; addSnippet: (LeTextSnippet new string: 'Working with snippets is fine, but ultimately working with Smalltalk means designing your own classes. To see how live programming differs from programming with conventional languages, see: [[A gentle introduction to classes and methods in Smalltalk]], where we will turn this code into a simple class-based solution.'; yourself); yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> aSingleStartingPointForScriptingLinkingAndDocumenting [
	<lePage>
	<gtExample>
	^ ((LePage named: 'A single starting point for scripting, linking and documenting')addSnippet: (LeTextSnippet new string: 'This very book is written in [[Lepiter]], a knowledge management system made out of interlinked multilanguage notebooks.'; yourself); addSnippet: (LeTextSnippet new string: '#Made of snippets'; yourself); addSnippet: (LeTextSnippet new string: 'Lepiter is made of snippets assembled in pages. Each snippet has its own language and comes with its own editor. This very [[Text snippet]] is based on [[Markdown]] and features live markup that appears on demand and with expandable links.'; yourself); addSnippet: (LeTextSnippet new string: 'Of course, there are other snippets, too, like this [[Pharo snippet]]:'; yourself); addSnippet: (LePharoSnippet new code: 'GtImage instance '; yourself); addSnippet: (LeTextSnippet new string: '#Single starting point'; yourself); addSnippet: (LeTextSnippet new string: 'Whether it''s a note to ourselves, an initial program, or an exploration of data, we start in Lepiter.'; yourself); addSnippet: (LeTextSnippet new string: 'Some examples:'; addSnippet: (LeTextSnippet new string: 'Say you are exploring some external API. The best way to start is with a query to that API:'; addSnippet: (LePharoSnippet new code: 'json := ZnClient new get: ''https://api.github.com/orgs/feenkcom''.
dictionary := STON fromString: json.'; yourself); addSnippet: (LeTextSnippet new string: 'See a more elaborate description in [[Working with a REST API: the GitHub case study]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'Or say that you are looking for something in the image. You can start with a query. For example, where else do we query APIs?'; addSnippet: (LePharoSnippet new code: 'ZnClient gtReferences
	& (''GToolkit'' gtPackageMatches | ''Lepiter'' gtPackageMatches)'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'Or perhaps you want to prototype a user interface:'; addSnippet: (LePharoSnippet new code: 'BlElement new background: Color red'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'And there are many more such situations. For more inspiration, simply browse through this book.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Knowledge graph'; yourself); addSnippet: (LeTextSnippet new string: 'These snippets are interlinked in a graph. A knowledge graph. Take a look at [[How to visualize the current knowledge base]] to see what the graph of this very book looks like.'; yourself); addSnippet: (LeTextSnippet new string: '#Programmability'; yourself); addSnippet: (LeTextSnippet new string: 'But the more important part is that these snippets are programmable and extensible. See [[Extending Lepiter with custom snippets and annotations]].'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> basicShortcuts [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Basic shortcuts')addSnippet: (LeTextSnippet new string: ''; yourself); addSnippet: (LeTextSnippet new string: 'The shortcuts of a method coder are as follows (selecting an item in the list will show an inspector that points to the source code of the respective shortcut):'; addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtSourceCoderEditorElementExamples'; exampleSelector: #editorForExampleMethodCoder; noCode: true; previewShowSelector: #gtShortcutsFor:); yourself); addSnippet: (LeTextSnippet new string: 'The shortcuts in a Pharo snippet are:'; addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtSourceCoderEditorElementExamples'; exampleSelector: #editorForSnippetCoder; noCode: true; previewShowSelector: #gtShortcutsFor:); yourself); addSnippet: (LeTextSnippet new string: 'That said, it is worth learning how to learn about shortcuts dynamically. Take a look at [[Driller]].'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> bloc [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Bloc')addSnippet: (LeTextSnippet new string: 'Bloc is a low-level UI infrastructure for Pharo and Glamorous Toolkit.'; yourself); addSnippet: (LeTextSnippet new string: ''; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> coder [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Coder')addSnippet: (LeTextSnippet new string: 'Coder is a set of components for creating and manipulating code.'; yourself); addSnippet: (LeTextSnippet new string: '#Method coder'; yourself); addSnippet: (LeTextSnippet new string: 'The smallest unit is the {{gtClass:GtPharoMethodCoder}} which, as the name says, focuses on editing one single method.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtPharoMethodCoderExamples'; exampleSelector: #forKeywordSelectorMethodCoder; noCode: true; previewExpanded: true; previewShowSelector: #gtLiveFor:; previewHeight: 150); addSnippet: (LeTextSnippet new string: 'The method coder can mold dynamically to fit the context of the current method. For example, when the method is annotated with `<gtExample>`, the coder is embellished with the possibility to run the method as an example, and see the result as a label. This happens dynamically. Give it a try below.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtPharoMethodCoderExamples'; exampleSelector: #forThisMethodCoder; noCode: true; previewExpanded: true; previewShowSelector: #gtLiveFor:; previewHeight: 400); addSnippet: (LeTextSnippet new string: '#Filters'; yourself); addSnippet: (LeTextSnippet new string: 'Method coders can be combined in different ways for different purposes. One of these purposes is searching. This is achieved by means of {{gtClass:GtSearchMethodsFilter}}.'; yourself); addSnippet: (LeTextSnippet new string: 'For example, below you see the result of a code query. Expanding the resulting method coders highlights the specific nodes that matched the query.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtSearchMethodFilterExamples'; exampleSelector: #gtExamplePragmas; codeExpanded: false; previewExpanded: true; previewShowSelector: #gtItemsFor:); addSnippet: (LeTextSnippet new string: 'See {{gtClass:GtSearchMethodFilterExamples}} for more details.'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> contextualView [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Contextual View')addSnippet: (LeTextSnippet new string: ''; yourself); addSnippet: (LeTextSnippet new string: '# Context'; addSnippet: (LeTextSnippet new string: 'You are exploring a live domain model and find some interesting information.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Problem'; addSnippet: (LeTextSnippet new string: 'How do you make it easy to find interesting information?'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Forces'; addSnippet: (LeTextSnippet new string: '— To obtain an interesting view of data, you are generally forced to activate a dedicated tool.'; yourself); addSnippet: (LeTextSnippet new string: '— Navigating to the data you want to reach may entail a sequence of operations, either clicking in
views, or evaluating code snippets, to reach the answer you seek.'; yourself); addSnippet: (LeTextSnippet new string: '— The sequence of steps may be cumbersome to follow repeatedly.'; yourself); addSnippet: (LeTextSnippet new string: '— The default view you obtain may not highlight the interesting bits of information.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Solution'; addSnippet: (LeTextSnippet new string: 'Turn interesting data into a custom view. Extract the navigation steps into a new custom view for the moldable object you start navigating from.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Examples'; addSnippet: (LeTextSnippet new string: 'As an example, consider the views of a partially played Ludo game below.  We would like to understand which moves have been played up to now. In the first example we are exploring a “raw view” — a generic view of the state of the object. With this view we can navigate to the individual moves and explore them, but it is a clumsy way to explore the object. '; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'PatternScripterExamples'; exampleSelector: #customViewRawViewScript; noCode: true; previewShowSelector: #gtLiveFor:; previewHeight: 650); addSnippet: (LeTextSnippet new string: 'In the second example we see a custom Moves view that lists the moves in order, with columns showing each roll of the die, the player who rolled the die, and any token that may have moved. From this custom view we can then dive directly into the Move object, which in turn has a custom view visualizing the change in state.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'PatternScripterExamples'; exampleSelector: #customViewCustomMovesViewScript; noCode: true; previewShowSelector: #gtLiveFor:; previewHeight: 600); yourself); addSnippet: (LeTextSnippet new string: '# Consequences'; addSnippet: (LeTextSnippet new string: 'A custom view exposes information about a domain that can otherwise be hard to find.'; yourself); addSnippet: (LeTextSnippet new string: 'Custom views become an intrinsic part of a software system, thus turning it into an [[Explainable System]].'; yourself); addSnippet: (LeTextSnippet new string: 'By augmenting an object with a custom view, you can navigate directly to interesting information about that object, without having to fire up a separate tool.'; yourself); addSnippet: (LeTextSnippet new string: 'You first need a [[Moldable Tool]] into which you can dynamically plug custom views.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Known Uses'; addSnippet: (LeTextSnippet new string: '[Clerk](https://doi.org/10.1145/3594671.3594682) is an open-source programming assistant for the Clojure language, which offers moldable, custom views within notebook pages. '; yourself); addSnippet: (LeTextSnippet new string: 'Custom views are pervasive in GT. In a standard image from August 2024, there exist over 1800 classes with a total of over 3600 view methods, averaging under 12 lines of code. It is also worthwhile to note that if we take inheritance into account, then the views affect 12000 classes. The treemap below offers an overview of the GT classes organized in packages. A class appears is colored with blue if it or its superclass defines a custom view, and in green if it defines an example method (see Example Object).'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtTour'; exampleSelector: #treemapWithViewsAndExamples; noCode: true; previewShowSelector: #gtLiveFor:; previewHeight: 400); yourself); addSnippet: (LeTextSnippet new string: '# Related patterns'; addSnippet: (LeTextSnippet new string: 'A custom view is closely related to a given [[Moldable Object]]. Interconnected objects with custom views can form a [[Composed Narrative]]. A [[Moldable Tool]] is a prerequisite for a custom view to be automatically installed when the relevant artifact (an object, a class, an exception, etc.) is seen by the tool. A custom view should be cheap to implement. Start with a [[Simple View]], and only elaborate it when it is needed.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# GT implementation notes'; addSnippet: (LeTextSnippet new string: 'A simple example is the view of the state of the stack of the StackMachine.'; yourself); addSnippet: (LeTextSnippet new string: 'In this example, we must navigate to the `stack` slot to see the stack items.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'StackMachineV2'; exampleSelector: #stackWith3and4; noCode: true); addSnippet: (LeTextSnippet new string: 'By creating a forwarding view, we “lift” the view we want to the StackMachine itself:'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'StackMachineV3'; exampleSelector: #stackWith3and4; noCode: true); addSnippet: (LeTextSnippet new string: 'Pretty much any view can be seen as an example of this principle. Consider the example of [[Working with a REST API: the GitHub case study]]. In the example below, the *Repositories* view is obtained by navigating to a list of repositories that are created programmatically.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GhOrganizationExamples'; exampleSelector: #feenkcomOrganization; noCode: true; previewExpanded: true; previewHeight: 300); addSnippet: (LeTextSnippet new string: 'By lifting this code into the {{gtClass:name=GhOrganization}} class and creating a dedicated view, we can explore the repositories without having to first navigate to a collection of repositories.'; yourself); addSnippet: (LeTextSnippet new string: 'Similarly, in the {{gtClass:name=GtLudoRecordingGame}}, many of the views are lifted from collaborating objects to eliminate the need for navigation when exploring. The views for *Players*, *Squares*, *Tokens* and *Moves* all replace the need for navigation.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtLudoRecordingGameExamples'; exampleSelector: #gameShowingAllMoves1; noCode: true; previewExpanded: true; previewHeight: 500); yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> debugger [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Debugger')addSnippet: (LeTextSnippet new string: 'The Debugger is a moldable debugger. See [[Extending the debugger through moldable exceptions]].'; yourself); addSnippet: (LeTextSnippet new string: 'Take a look at this example with an exception:'; yourself); addSnippet: (LePharoSnippet new code: '1/0'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> gettingStartedWithGTIn [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Getting started with GT in 7''')addSnippet: (LeTextSnippet new string: 'We show how to get started with a variety of tools built into GT, and show how these tools support moldable development.'; yourself); addSnippet: (LeYoutubeReferenceSnippet new urlString: 'https://youtu.be/lqogvp1dGpk'; yourself); addSnippet: (LeTextSnippet new string: 'See also:'; addSnippet: (LeTextSnippet new string: '[[A tour of the environment]] '; yourself); addSnippet: (LeTextSnippet new string: '[[How to get started with Lepiter (FAQ)]]'; yourself); addSnippet: (LeTextSnippet new string: '[[How to get started with Coder  (FAQ)]] '; yourself); addSnippet: (LeTextSnippet new string: '[[How to work with GitHub]]'; yourself); addSnippet: (LeTextSnippet new string: '[[Working with a REST API: the GitHub case study]] '; yourself); addSnippet: (LeTextSnippet new string: '[[Parsing with PetitParser2]]'; yourself); addSnippet: (LeTextSnippet new string: '[[Moldable Development]]'; yourself); yourself); addSnippet: (LeTextSnippet new string: ''; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> glamorousToolkit [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Glamorous Toolkit')addSnippet: (LeTextSnippet new string: 'Glamorous Toolkit (GT) is the Moldable Development Environment. It empowers you to make systems explainable through experiences tailored for each problem. Glamorous Toolkit makes this possible by making the creation of custom tools inexpensive and seamless.'; yourself); addSnippet: (LeTextSnippet new string: '#Ok, but what can you do with it?'; addSnippet: (LeTextSnippet new string: 'You can build many tools. And we mean many. Glamorous Toolkit itself comes with several thousand extensions. But here are a few things you might recognize: '; addSnippet: (LeTextSnippet new string: 'you can browse and document an unknown API, '; yourself); addSnippet: (LeTextSnippet new string: 'you can program with other languages like Python and extend the environment with Python code,'; yourself); addSnippet: (LeTextSnippet new string: 'you can analyze software written in different languages, '; yourself); addSnippet: (LeTextSnippet new string: 'you can explore a database, '; yourself); addSnippet: (LeTextSnippet new string: 'you can build a whole dedicated environment. '; yourself); yourself); addSnippet: (LeTextSnippet new string: 'Sounds crazy, we know. So, don''t believe us. Just [[Get started]] to see it in practice.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Get started'; addSnippet: (LeTextSnippet new string: 'Moldable Development is a way of programming through custom tools. Take [[A tour of the environment]] at first, but Moldable Development is best learned by doing. Start with a concrete problem you care about. Get more ideas here: [[Get started]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Why is Moldable Development important?'; addSnippet: (LeTextSnippet new string: 'Figuring systems out is the single most expensive activity in software development. And most of it is spent reading. The development environment can do a much better job in helping developers make software explainable. The central idea is that tools must be moldable to the task at hand, and of course it must be inexpensive to adapt the tools. We call this [[Moldable Development]]. We explain how to do it with the help of [[Moldable Development patterns]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Created by feenk under an MIT license'; addSnippet: (LeTextSnippet new string: 'Glamorous Toolkit is developed by [[feenk]], and was born out of a long term effort to make the inside of software systems explainable. It is available under an MIT license because we want you to experience Moldable Development as directly as possible.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Distinct environment'; addSnippet: (LeTextSnippet new string: 'Glamorous Toolkit is built in [[Pharo]], but the goal of GT is distinct from that of Pharo and so is its realization. Read more about [[Glamorous Toolkit and Pharo]].'; yourself); yourself); addSnippet: (LeTextSnippet new string: '#Find it online'; addSnippet: (LeTextSnippet new string: 'Webpage: [gtoolkit.com](https://gtoolkit.com)'; yourself); addSnippet: (LeTextSnippet new string: 'Discord chat: [discord.gg/FTJr9gP](https://discord.gg/FTJr9gP)'; yourself); addSnippet: (LeTextSnippet new string: 'Twitter: [@feenkcom](https://twitter.com/feenkcom)'; yourself); addSnippet: (LeTextSnippet new string: 'YouTube: [@gtoolkit](https://youtube.com/@gtoolkit) '; yourself); yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> howDoIRecoverMyWorkAfterACrash [
	<lePage>
	<gtExample>
	^ ((LePage named: 'How do I recover my work after a crash?')addSnippet: (LeTextSnippet new string: 'On the rare occasion of a system crash (or forced-quit) you can normally recover most of your changes.'; yourself); addSnippet: (LeTextSnippet new string: 'Changes to Lepiter notebook pages are regularly written to disk, so unless the VM crashed before the  database monitor could sync, there is nothing to do there.'; yourself); addSnippet: (LeTextSnippet new string: 'Any code changes, i.e., added or changed methods or classes, are also written to disk in the image''s *changes* file every time you commit.'; yourself); addSnippet: (LeTextSnippet new string: 'To recover your changes, you need to open the `Code Changes` tool from the GtHome menu.'; yourself); addSnippet: (LeTextSnippet new string: 'There you will find the logs of all your changes. Explore them, select the changes you want to replay, and `Apply` them.'; yourself); addSnippet: (LeElementSnippet new code: 'GtEpiceaStencil new'; codeVisible: false; elementHeight: 300; codeHeight: 50; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> howToCreateALepiterPage [
	<lePage>
	<gtExample>
	^ ((LePage named: 'How to create a Lepiter page?')addSnippet: (LeTextSnippet new string: 'You can create a new Note or new Playground from the GT home tab, or from the menu (top right). Try it below.'; yourself); addSnippet: (LeElementSnippet new code: 'GtWorldElement new
	knowledgeBase: LeDatabasesRegistry uniqueInstance currentLoadedDefaultLogicalDatabase'; codeVisible: false; elementHeight: 491; codeHeight: 50; yourself); addSnippet: (LeTextSnippet new string: 'NB: You can also create a new Lepiter page by creating a link that doesn''t exist, i.e., `[[A new page name]]`, and clicking on it. Note that this will create a page in the same database as the page with the link, whereas the clicking on the new page link will create it in the same database as the page with the link. Try it:'; addSnippet: (LeTextSnippet new string: '[[A new page name]] '; yourself); yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> howToFindStuffInGTIn [
	<lePage>
	<gtExample>
	^ ((LePage named: 'How to find stuff in GT in 7''')addSnippet: (LeTextSnippet new string: 'We show how to query and explore Smalltalk code within GT using a number of complementary tools and techniques. Specifically, we look at: '; addSnippet: (LeTextSnippet new string: '(i) using [[Spotter]], '; yourself); addSnippet: (LeTextSnippet new string: '(ii) finding senders and implementers with keyboard shortcuts, '; yourself); addSnippet: (LeTextSnippet new string: '(iii) posing queries (see also [[Querying Pharo code with GT filters]]), '; yourself); addSnippet: (LeTextSnippet new string: '(iv) querying Smalltalk classes and methods from a [[Pharo snippet]], '; yourself); addSnippet: (LeTextSnippet new string: '(v) using the MethodFinder, '; yourself); addSnippet: (LeTextSnippet new string: '(vi) exploring inspector view code, and '; yourself); addSnippet: (LeTextSnippet new string: '(vii) drilling into UI code (see also [[Driller]])'; yourself); addSnippet: (LeTextSnippet new string: ''; yourself); addSnippet: (LeYoutubeReferenceSnippet new urlString: 'https://youtu.be/ZMKQv2Du5OU'; yourself); yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> howToPagesRelatedToGemStone [
	<lePage>
	<gtExample>
	^ ((LePage named: 'How to pages related to GemStone')addSnippet: (LeTextSnippet new string: ''; yourself); addSnippet: (LeTextSnippet new string: 'These are pages withGemStone related content.'; yourself);  yourself)
]

{ #category : #initialization }
GtBookMockDatabase >> initializeDatabase [
	"Create and initialize a transient Lepiter database for the dynamically created pages. We need to create a transient registry as well, so that links will work within the database. Automatically load all pages defined in methods with a <lePage> pragma."

	database
		ifNil: [ database := LeDatabase new monitor: LeVolatileMonitor new.
			LeBasicDatabasesRegistry new
				defaultLogicalDatabase: (LeLogicalDatabase new primaryDB: database) ].

	self pageMethods
		do: [ :m | 
			| page |
			page := self perform: m selector.
			(database hasPageNamed: page title) ifFalse: [ database addPage: page ] ]
]

{ #category : #page }
GtBookMockDatabase >> java [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Java')addSnippet: (LeTextSnippet new string: 'Java, the language.'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> queryingObjects [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Querying objects')addSnippet: (LeTextSnippet new string: '# TL;DR'; addSnippet: (LeTextSnippet new string: 'This page provides a brief overview of ways to reflectively query objects, namely *accessing object pointers*, *accessing object state*, and *accessing an object''s class*.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# What is an object?'; addSnippet: (LeTextSnippet new string: 'There are three key aspects of an object in Smalltalk:'; yourself); addSnippet: (LeTextSnippet new string: '1. An object is a *reference* (*i.e.*, a “pointer”) to a piece of memory in the image.'; yourself); addSnippet: (LeTextSnippet new string: '2. An object *contains values*. These may be instance variables, indexed (array) values, or, in the degenerate case of a {{gtClass:name=SmallInteger}}, the reference itself is the value.'; yourself); addSnippet: (LeTextSnippet new string: '3. An object is an instance of a class.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Accessing object pointers'; addSnippet: (LeTextSnippet new string: 'Normally you won''t care what the actual pointer value of an object is, but you might like to know what points to an object you have in your hand.'; yourself); addSnippet: (LeTextSnippet new string: 'Here we find all the pointers to a new instance of {{gtClass:name=GtLudoGame}}. '; yourself); addSnippet: (LePharoSnippet new code: 'GtLudoGame new pointersTo.'; yourself); addSnippet: (LeTextSnippet new string: 'This shows us that an instance of a Ludo game consists of numerous components that point back to the game instance.'; yourself); addSnippet: (LeTextSnippet new string: 'This and related methods can be useful, for example, for debugging memory leaks. See the `pointing to` protocol of {{gtClass:name=ProtoObject}} for some other pointer querying methods.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Accessing object state'; addSnippet: (LeTextSnippet new string: 'Recall that the slots of an object are *private* to that object. If accessors are not provided, then no other object, including other objects of the same class, and even the class of the object, cannot read or write the slots of that object. (For this reason object initialization in Smalltalk is a bit convolution, with instance creation always utilizing instance-side methods to initialize a new object''s state.)'; yourself); addSnippet: (LeTextSnippet new string: 'With reflection, however, we can circumvent this restriction, even if an object provides no accessors.'; yourself); addSnippet: (LeTextSnippet new string: 'For example, an instance of {{gtClass:name=GtLudoRecordingGame}} has a `#routeCache` slot, but no accessor. We can nevertheless access it programmatically with the help of {{gtMethod:name=Object>>#instVarNamed:}}. '; yourself); addSnippet: (LePharoSnippet new code: 'game := GtLudoRecordingGame new autoPlay: 10.
game instVarNamed: #routeCache.'; yourself); addSnippet: (LeTextSnippet new string: 'We can also change an object''s state with {{gtMethod:name=Object>>#instVarNamed:put:}}. '; yourself); addSnippet: (LeTextSnippet new string: 'You can similarly access indexed data as follows:'; yourself); addSnippet: (LePharoSnippet new code: '''Hello'' instVarAt: 5.'; yourself); addSnippet: (LeTextSnippet new string: 'Note that these methods are classified in the `introspection` protocol of {{gtClass:name=Object}}. '; yourself); addSnippet: (LeTextSnippet new string: 'Accessing an object''s state in this way can be useful for building tools or analyses (such as an Inspector), but for normal applications it is advisable to create dedicated accessors instead.'; yourself); yourself); addSnippet: (LeTextSnippet new string: '# Accessing an object''s class'; addSnippet: (LeTextSnippet new string: 'To get the class of an object, just send it the message `class`:'; yourself); addSnippet: (LePharoSnippet new code: 'game := GtLudoRecordingGameExamples new gameShowingAllMoves6.
game class.'; yourself); addSnippet: (LeTextSnippet new string: 'Note that this returns a *reification* of the object''s class, that is, a *metaobject* called {{gtClass:name=GtLudoRecordingGame}}. This is for all intents and purposes the object''s class, but it is *not* the actual running class in the virtual machine. Since the two are causally connected (changes to the one will affect the other), we don''t really notice the difference.'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'Next: [[Querying classes and methods]] '; yourself); addSnippet: (LeTextSnippet new string: ''; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> treemap [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Treemap')addSnippet: (LeTextSnippet new string: ''; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtGraphTreemapLayoutExamples'; exampleSelector: #squarifyWithSevenNodes; codeExpanded: false; previewExpanded: true; previewShowSelector: #gtPreviewFor:; previewHeight: 400);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> workingWithARESTAPITheGitHubCaseStudy [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Working with a REST API: the GitHub case study')addSnippet: (LeTextSnippet new string: 'Glamorous Toolkit allows you to work with REST APIs out of the box.'; yourself); addSnippet: (LeTextSnippet new string: 'Here, we take a look at how we can play with the GitHub REST API. Take a look at the related [[Exploring the GitHub REST API in 7'']] video.'; yourself); addSnippet: (LeTextSnippet new string: 'As a case study we start from JSON content located at [https://api.github.com/orgs/feenkcom](https://api.github.com/orgs/feenkcom) which looks like this:'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GtWorkingWithTheGitHubRestApiShow'; exampleSelector: #responseForFeenkOrg; noCode: true; previewExpanded: true; previewShowSelector: #gtJsonFor:); addSnippet: (LeTextSnippet new string: 'The first thing we do is to get that JSON programmatically:'; yourself); addSnippet: (LePharoSnippet new code: 'url := ''https://api.github.com/orgs/feenkcom''.'; yourself); addSnippet: (LePharoSnippet new code: 'json := ZnClient new get: url.'; yourself); addSnippet: (LeTextSnippet new string: 'Now, that''s just a string. We never really want to work with a string. We''d rather parse it:'; yourself); addSnippet: (LePharoSnippet new code: 'dictionary := STONJSON fromString: json.'; yourself); addSnippet: (LeTextSnippet new string: 'Parsing the JSON string produces a dictionary. That''s already better, but still not quite what we want. We want a custom experience for that outcome. To this end, we wrap the data as a first class object:'; yourself); addSnippet: (LePharoSnippet new code: 'GhOrganization new rawData: dictionary.'; yourself); addSnippet: (LeTextSnippet new string: 'Once we have a dedicated object the inspector gets the opportunity to present custom views. For example, the repositories list is described in {{gtMethod:GhOrganization>>#gtReposFor:}}.'; yourself); addSnippet: (LeExampleSnippet new  exampleBehaviorName: 'GhOrganizationExamples'; exampleSelector: #feenkcomOrganization; noCode: true; previewExpanded: true; previewHeight: 300); addSnippet: (LeTextSnippet new string: 'Now, try exploring. For example, what happens when you double click on a repository?'; yourself);  yourself)
]

{ #category : #page }
GtBookMockDatabase >> workingWithATProtocol [
	<lePage>
	<gtExample>
	^ ((LePage named: 'Working with AT Protocol')addSnippet: (LeTextSnippet new string: 'The [AT Protocol](https://atproto.com) is meant to offer a programmable platform for social media. For example, a key proposition is to enable the individual to control the algorithm of what is being presented. Of course, there is no single algorithm. There can be many. These algorithms require programming. And programming benefits from dedicated environments.'; yourself); addSnippet: (LeTextSnippet new string: '[gt4atproto](https://github.com/feenkcom/gt4atproto) is such a dedicated environment built on top of [[Glamorous Toolkit]].'; yourself); addSnippet: (LeTextSnippet new string: 'It covers several things at different levels of abstraction such as:'; addSnippet: (LeTextSnippet new string: 'Creating posts and threads from inside the knowledge management system.'; yourself); addSnippet: (LeTextSnippet new string: 'Working with a server through AT Protocol.'; yourself); addSnippet: (LeTextSnippet new string: 'Streaming and pagination support out of the box.'; yourself); addSnippet: (LeTextSnippet new string: 'Inspecting and visualizing results.'; yourself); addSnippet: (LeTextSnippet new string: 'Code generation from lexicons to Smalltalk code.'; yourself); addSnippet: (LeTextSnippet new string: 'Dedicated styling and completion support for editing lexicon JSON files.'; yourself); yourself); addSnippet: (LeTextSnippet new string: 'Each of these is an interesting case study in itself, but the more interesting story is how we can accommodate all of these in a single coherent environment.'; yourself); addSnippet: (LeTextSnippet new string: 'To explore it, load the code with:'; yourself); addSnippet: (LePharoSnippet new code: 'Metacello new
	repository: ''github://feenkcom/gt4atproto:main/src'';
	baseline: ''Gt4AtProto'';
	load.
#BaselineOfGt4AtProto asClass loadLepiter'; yourself); addSnippet: (LeTextSnippet new string: 'This loads also a Lepiter knowledge base. Once loaded start at:{{gtPage:About Glamorous Toolkit for AT Protocol|db=e05zlf1q3ncmqem0wxh2hsy2}}'; yourself);  yourself)
]
